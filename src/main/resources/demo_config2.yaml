# settings for the modbus device

# settings for the c2mon connection
c2monSettings: # required
  clientAddress: 192.168.111.77 # required
  clientPort: 30203 # optional, 61616 is the default port number
  #daqAddress: # optional
  #daqPort: # optional

# setting of the cinergia electric last  model in general
modelSettings:
  modelName: DAQTEST_CINERGIA_1 # required, will be in front of the tag name
  modelVersion: 0.0.1 # optional
  processName: DAQTEST_PROCESS_CINERGIA_1  # required

equipments:
  - name: DAQTEST_EQUIPMENT_CINERGIA_1 # required
    aliveTagInterval: 100000 #optional, time in milliseconds an aliveTag is sent to C2mon
    interval: 10000 # optional, time in milliseconds for refreshing all data tags
    type: modbus # type of the connection
    connectionSettings: # required
      address: 172.16.0.82 # required
      port: 502 # required
      unitID: 1 # optional but required? for load simulator device
    # define all signals (data and commands) provided by the modbus interface
    signals:
    - name: Alarm_Vector_ABR # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 13000 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_GrafcetState # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16000 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_LocalRemote # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16002 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_SetPoint_Input # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16004 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_OperationSelector # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16006 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_GE_EL_Selector # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16008 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_OutputConnection # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16010 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_ControlOperation # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16012 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_FunctionOperation # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16014 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_TriggerConfig # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16016 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_TriggerFunction # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16018 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_HWConfig # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16020 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_Bipolar # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16022 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_BranchControl # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16024 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_ControlOperationU # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16026 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_ControlOperationV # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16028 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_ControlOperationW # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16030 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_GrafcetStateU # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16032 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_GrafcetStateV # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16034 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_GrafcetStateW # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16036 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_ONOFF_U # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16038 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_ONOFF_V # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16040 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_ONOFF_W # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16042 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_Enable_Share_UV_Current # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16044 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: SW_HR_Mode # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16046 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_MainGrid_RS_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16060 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_MainGrid_ST_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16062 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_MainGrid_TR_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16064 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_MainGrid_R_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16066 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_MainGrid_S_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16068 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_MainGrid_T_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16070 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_MainGrid_R_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16072 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_MainGrid_S_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16074 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_MainGrid_T_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16076 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: VbusTotal # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16078 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Temp_ABR # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16090 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Temp_INV # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16092 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Active_MainGrid_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16096 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Active_MainGrid_S # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16098 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Active_MainGrid_T # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16100 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Active_MainGrid_Total # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16102 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Reactive_MainGrid_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16104 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Reactive_MainGrid_S # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16106 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Reactive_MainGrid_T # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16108 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Apparent_MainGrid_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16112 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Apparent_MainGrid_S # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16114 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Apparent_MainGrid_T # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16116 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Apparent_MainGrid_Total # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16118 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Frequency_MainGrid_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16120 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Frequency_MainGrid_S # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16122 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Frequency_MainGrid_T # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 16124 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_BranchControl # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17000 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_BranchControl_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17000 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_Reset # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17002 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_Reset_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17002 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_EnableDisable # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17004 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_EnableDisable_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17004 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_RunReady # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17006 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_RunReady_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17006 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ControlOperation # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17014 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ControlOperation_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17014 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_FunctionOperation # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17016 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_FunctionOperation_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17016 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ControlOperationU # required
      min: 0 # required
      max: 6 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17020 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ControlOperationU_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17020 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ControlOperationV # required
      min: 0 # required
      max: 6 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17022 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ControlOperationV_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17022 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ControlOperationW # required
      min: 0 # required
      max: 6 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17024 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ControlOperationW_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17024 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ONOFF_U # required
      min: 0 # required
      max: 1 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17026 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ONOFF_U_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17026 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ONOFF_V # required
      min: 0 # required
      max: 1 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17028 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ONOFF_V_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17028 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ONOFF_W # required
      min: 0 # required
      max: 1 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17030 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_ONOFF_W_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17030 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_Trigger_Config # required
      min: 0 # required
      max: 1 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17032 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_Trigger_Config_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17032 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_Trigger_Function # required
      min: 0 # required
      max: 1 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17034 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CW_Trigger_Function_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 17034 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Alarm_Vector_INV # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23000 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Voltage_AC_Output_U # required
      min: 0 # required
      max: 277 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23004 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Voltage_AC_Output_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23004 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Voltage_AC_Output_V # required
      min: 0 # required
      max: 277 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23006 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Voltage_AC_Output_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23006 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Voltage_AC_Output_W # required
      min: 0 # required
      max: 277 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23008 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Voltage_AC_Output_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23008 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Voltage_AC_Output_Global # required
      min: 0 # required
      max: 277 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23010 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Voltage_AC_Output_Global_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23010 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Voltage_AC_Output_U # required
      min: 0 # required
      max: 277 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23012 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Voltage_AC_Output_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23012 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Voltage_AC_Output_V # required
      min: 0 # required
      max: 277 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23014 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Voltage_AC_Output_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23014 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Voltage_AC_Output_W # required
      min: 0 # required
      max: 277 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23016 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Voltage_AC_Output_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23016 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Voltage_AC_Output_Global # required
      min: 0 # required
      max: 277 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23018 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Voltage_AC_Output_Global_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23018 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Current_AC_Output_U # required
      min: -345 # required
      max: 345 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23020 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Current_AC_Output_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23020 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Current_AC_Output_V # required
      min: -345 # required
      max: 345 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23022 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Current_AC_Output_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23022 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Current_AC_Output_W # required
      min: -345 # required
      max: 345 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23024 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Current_AC_Output_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23024 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Current_AC_Output_Global # required
      min: -1035 # required
      max: 1035 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23026 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Current_AC_Output_Global_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23026 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Current_AC_Output_U # required
      min: -345 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23028 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Current_AC_Output_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23028 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Current_AC_Output_V # required
      min: -345 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23030 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Current_AC_Output_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23030 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Current_AC_Output_W # required
      min: -345 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23032 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Current_AC_Output_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23032 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Current_AC_Output_Global # required
      min: -1035 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23034 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Current_AC_Output_Global_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23034 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Power_Output_U # required
      min: 0 # required
      max: 80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23076 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Power_Output_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23076 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Power_Output_V # required
      min: 0 # required
      max: 80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23078 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Power_Output_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23078 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Power_Output_W # required
      min: 0 # required
      max: 80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23080 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Power_Output_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23080 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Power_Output_Global # required
      min: 0 # required
      max: 240000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23082 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_Power_Output_Global_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23082 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Power_Output_U # required
      min: -80000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23084 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Power_Output_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23084 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Power_Output_V # required
      min: -80000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23086 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Power_Output_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23086 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Power_Output_W # required
      min: -80000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23088 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Power_Output_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23088 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Power_Output_Global # required
      min: -240000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23090 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_Power_Output_Global_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23090 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_freq_out # required
      min: 10 # required
      max: 400 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23092 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_min_freq_out_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23092 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_freq_out # required
      min: 10 # required
      max: 400 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23094 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Limit_max_freq_out_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 23094 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CutOff_freq # required
      min: 10 # required
      max: 770 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 24002 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: CutOff_freq_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 24002 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Magnitude_FadeIn_Current_Dip # required
      min: 1 # required
      max: 300 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25000 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Magnitude_FadeIn_Current_Dip_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25000 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Magnitude_FadeOut_Current_Dip # required
      min: 1 # required
      max: 300 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25002 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Magnitude_FadeOut_Current_Dip_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25002 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Angle_FadeIn_Current_Dip # required
      min: 1 # required
      max: 100 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25004 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Angle_FadeIn_Current_Dip_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25004 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Angle_FadeOut_Current_Dip # required
      min: 1 # required
      max: 100 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25006 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Angle_FadeOut_Current_Dip_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25006 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Current_Dip_U # required
      min: 0 # required
      max: 200 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25008 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Current_Dip_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25008 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Current_Dip_V # required
      min: 0 # required
      max: 200 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25010 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Current_Dip_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25010 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Current_Dip_W # required
      min: 0 # required
      max: 200 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25012 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Current_Dip_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25012 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Angle_Current_Dip_U # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25014 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Angle_Current_Dip_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25014 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Angle_Current_Dip_V # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25016 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Angle_Current_Dip_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25016 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Angle_Current_Dip_W # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25018 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Angle_Current_Dip_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25018 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Magnitude_FadeIn_Current_Flicker # required
      min: 1 # required
      max: 300 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25030 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Magnitude_FadeIn_Current_Flicker_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25030 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Magnitude_FadeOut_Current_Flicker # required
      min: 1 # required
      max: 300 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25032 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Ramp_Magnitude_FadeOut_Current_Flicker_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25032 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Current_Flicker # required
      min: 0 # required
      max: 50 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25034 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Current_Flicker_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25034 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Frequency_Carrier_Flicker # required
      min: 1 # required
      max: 20 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25036 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Frequency_Carrier_Flicker_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25036 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Fault_Duration_Time_U # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25038 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Fault_Duration_Time_U_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25038 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Fault_Duration_Time_V # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25040 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Fault_Duration_Time_V_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25040 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Fault_Duration_Time_W # required
      min: 0 # required
      max: 4294967296 # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25042 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Fault_Duration_Time_W_R # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25042 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Start_Angle_Fault_U # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25044 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Start_Angle_Fault_U_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25044 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Start_Angle_Fault_V # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25046 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Start_Angle_Fault_V_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25046 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Start_Angle_Fault_W # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25048 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Start_Angle_Fault_W_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 25048 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Status_Word_INV # required
      type: s64 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26000 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_UV_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26078 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_VW_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26080 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_WU_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26082 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_Intern_U # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26084 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_Intern_V # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26086 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_Intern_W # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26088 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_U_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26090 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_V_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26092 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Voltage_Output_W_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26094 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Output_U_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26096 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Output_V_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26098 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Output_W_RMS # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26100 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Output_Global # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26102 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Active_Output_U # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26110 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Active_Output_V # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26112 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Active_Output_W # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26114 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Active_Output_Total # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26116 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Reactive_Output_U # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26118 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Reactive_Output_V # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26120 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Reactive_Output_W # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26122 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Reactive_Output_Total # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26124 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Apparent_Output_U # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26126 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Apparent_Output_V # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26128 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Apparent_Output_W # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26130 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Power_Apparent_Output_Total # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26132 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Frequency_Output_U # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26134 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Frequency_Output_V # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26136 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Frequency_Output_W # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26138 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Angle_Output_U # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26140 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Angle_Output_V # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26142 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Angle_Output_W # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 26144 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_AC_Output_U_SP # required
      min: 1 # required
      max: 500 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27208 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_AC_Output_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27208 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_Phase_Angle_Output_U_SP # required
      min: 1 # required
      max: 500 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27210 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_Phase_Angle_Output_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27210 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_Phase_Angle_U_SP # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27212 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_Phase_Angle_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27212 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_AC_U_SP # required
      min: -345 # required
      max: 345 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27214 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27214 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H2_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27216 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H2_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27216 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H3_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27218 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H3_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27218 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H4_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27220 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H4_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27220 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H5_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27222 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H5_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27222 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H6_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27224 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H6_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27224 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H7_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27226 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H7_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27226 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H8_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27228 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H8_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27228 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H9_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27230 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H9_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27230 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H10_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27232 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H10_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27232 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H11_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27234 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H11_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27234 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H12_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27236 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H12_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27236 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H13_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27238 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H13_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27238 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H14_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27240 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H14_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27240 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H15_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27242 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H15_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27242 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H0_AC_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27244 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H0_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27244 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Index_Current_H0_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27246 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Index_Current_H0_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27246 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Current_H0_U_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27248 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Current_H0_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27248 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_AC_Output_V_SP # required
      min: 1 # required
      max: 500 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27250 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_AC_Output_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27250 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_Phase_Angle_Output_V_SP # required
      min: 1 # required
      max: 500 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27252 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_Phase_Angle_Output_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27252 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_Phase_Angle_V_SP # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27254 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_Phase_Angle_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27254 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_AC_V_SP # required
      min: -345 # required
      max: 345 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27256 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27256 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H2_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27258 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H2_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27258 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H3_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27260 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H3_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27260 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H4_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27262 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H4_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27262 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H5_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27264 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H5_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27264 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H6_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27266 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H6_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27266 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H7_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27268 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H7_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27268 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H8_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27270 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H8_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27270 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H9_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27272 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H9_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27272 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H10_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27274 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H10_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27274 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H11_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27276 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H11_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27276 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H12_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27278 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H12_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27278 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H13_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27280 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H13_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27280 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H14_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27282 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H14_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27282 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H15_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27284 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H15_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27284 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H0_AC_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27286 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H0_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27286 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Index_Current_H0_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27288 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Index_Current_H0_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27288 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Current_H0_V_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27290 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Current_H0_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27290 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_AC_Output_W_SP # required
      min: 1 # required
      max: 500 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27292 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_AC_Output_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27292 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_Phase_Angle_Output_W_SP # required
      min: 1 # required
      max: 500 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27294 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Ramp_Phase_Angle_Output_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27294 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_Phase_Angle_W_SP # required
      min: -360 # required
      max: 360 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27296 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_Phase_Angle_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27296 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_AC_W_SP # required
      min: -345 # required
      max: 345 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27298 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_Fundamental_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27298 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H2_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27300 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H2_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27300 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H3_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27302 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H3_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27302 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H4_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27304 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H4_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27304 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H5_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27306 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H5_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27306 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H6_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27308 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H6_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27308 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H7_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27310 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H7_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27310 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H8_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27312 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H8_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27312 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H9_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27314 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H9_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27314 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H10_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27316 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H10_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27316 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H11_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27318 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H11_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27318 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H12_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27320 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H12_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27320 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H13_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27322 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H13_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27322 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H14_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27324 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H14_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27324 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H15_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27326 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H15_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27326 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H0_AC_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27328 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Current_H0_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27328 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Index_Current_H0_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27330 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Index_Current_H0_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27330 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Current_H0_W_SP # required
      min: -1 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27332 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Phase_Current_H0_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27332 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Reactive_AC_U_SP # required
      min: -80000 # required
      max: -80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27450 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Reactive_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27450 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Reactive_AC_V_SP # required
      min: -80000 # required
      max: -80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27452 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Reactive_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27452 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Reactive_AC_W_SP # required
      min: -80000 # required
      max: -80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27454 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Reactive_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27454 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Power_AC_U_SP # required
      min: -80000 # required
      max: -80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27458 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Power_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27458 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Power_AC_V_SP # required
      min: -80000 # required
      max: -80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27460 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Power_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27460 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Power_AC_W_SP # required
      min: -80000 # required
      max: -80000 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27462 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Power_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27462 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Capacitance_AC_U_SP # required
      min: 1000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27468 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Capacitance_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27468 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Capacitance_AC_V_SP # required
      min: 1000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27470 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Capacitance_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27470 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Capacitance_AC_W_SP # required
      min: 1000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27472 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Capacitance_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27472 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Inductance_AC_U_SP # required
      min: 1000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27476 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Inductance_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27476 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Inductance_AC_V_SP # required
      min: 1000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27478 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Inductance_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27478 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Inductance_AC_W_SP # required
      min: 1000 # required
      max: 0 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27480 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Inductance_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27480 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Resistance_AC_U_SP # required
      min: 1000 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27484 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Resistance_AC_U_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27484 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Resistance_AC_V_SP # required
      min: 1000 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27486 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Resistance_AC_V_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27486 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Resistance_AC_W_SP # required
      min: 1000 # required
      max: 1 # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: write # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27488 # required
        count: 2 # optional for reading only one value, otherwise required

    - name: Magnitude_Resistance_AC_W_SP_R # required
      type: float32 # required, data type defined by SourceDataType enum
      description: # optional
      modbus: # required
        type: read # required type can be one of the following words: [read,write]
        register: holding32 # required; read => [holding] write => [holding]
        startAddress: 27488 # required
        count: 2 # optional for reading only one value, otherwise required

